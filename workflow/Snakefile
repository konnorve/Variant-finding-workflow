# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.
from pathlib import Path
import pandas as pd


SAMPLE_TABLE = pd.read_csv(config["samples"], index_col="sample_name", sep="\t")
SAMPLE_TABLE.index = SAMPLE_TABLE.index.map(str)

ALL_SAMPLES = SAMPLE_TABLE.index.to_list()

PACBIO_SAMPLES = SAMPLE_TABLE[SAMPLE_TABLE['ccs_read'].notnull()].index.to_list() if 'ccs_read' in SAMPLE_TABLE.columns else []
ILLUMINA_SAMPLES = SAMPLE_TABLE[SAMPLE_TABLE['fwd_read'].notnull() & SAMPLE_TABLE['rev_read'].notnull()].index.to_list() if 'fwd_read' in SAMPLE_TABLE.columns and 'rev_read' in SAMPLE_TABLE.columns else []
ALL_REFERENCES = SAMPLE_TABLE['reference'].unique()

scratch_dir = Path(config["scratch_dir"])
results_dir = Path(config["results_dir"])
scratch_dict = {
    "trimmed_reads": scratch_dir / "1_trimmed_reads", 
    "genome_index": scratch_dir / "2_genome_index",
    "mapped_reads": scratch_dir / "3_mapped_reads",
    "vcfs": scratch_dir / "4_calling_variants" / "vcfs",
    "mpileup": scratch_dir / "4_calling_variants" / "mpileup",
    "variant positions": scratch_dir / "4_calling_variants" / "variant_positions",
    "filtered mpileups": scratch_dir / "4_calling_variants" / "filtered_combined_pileups",
}


def get_reference(wildcards):
    ref_key = SAMPLE_TABLE.loc[wildcards.sample, 'reference']
    return config["reference genomes"][ref_key]["genome"]

rule all:
    input:
        expand(results_dir / "{reference}_candidate_mutation_table.tsv.gz", reference=ALL_REFERENCES)

include: "rules/mapping.smk"


include: "rules/run_trim.smk"


include: "rules/samtools.smk"


include: "rules/call_variants.smk"

